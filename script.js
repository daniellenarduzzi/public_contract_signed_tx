const fs = require('fs');
const solc = require('solc');
const Web3 = require('web3');
const Tx = require('ethereumjs-tx');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
var privateKey = new Buffer('3125f5682dbe00f58c3dce15319ae030742fb79a328ced4b0771e0099420ed3f', 'hex')
const input = fs.readFileSync('public.sol');
const output = solc.compile(input.toString(), 1);
const bytecode = output.contracts[':PrivateContract'].bytecode;
const abi = JSON.parse(output.contracts[':PrivateContract'].interface);
const contract = new web3.eth.Contract(abi);
const contractData = "0x608060405234801561001057600080fd5b506040516108e33803806108e3833981016040908152815160208084015192840151918401805190949384019392909201916100529160009190860190610089565b5081516100669060029060208501906100ee565b50805161007a9060019060208401906100ee565b50506001600355506101a99050565b8280548282559060005260206000209081019282156100de579160200282015b828111156100de5782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906100a9565b506100ea929150610168565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012f57805160ff191683800117855561015c565b8280016001018555821561015c579182015b8281111561015c578251825591602001919060010190610141565b506100ea92915061018f565b61018c91905b808211156100ea578054600160a060020a031916815560010161016e565b90565b61018c91905b808211156100ea5760008155600101610195565b61072b806101b86000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317ac53a2811461007c57806324c12bf61461018257806335aa2e441461020c578063affed0e01461024d578063b7ab4db514610274578063c19d93fb146102d9575b600080fd5b34801561008857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610180943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506102ee9650505050505050565b005b34801561018e57600080fd5b506101976104d7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d15781810151838201526020016101b9565b50505050905090810190601f1680156101fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021857600080fd5b50610224600435610562565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561025957600080fd5b50610262610597565b60408051918252519081900360200190f35b34801561028057600080fd5b5061028961059d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c55781810151838201526020016102ad565b505050509050019250505060405180910390f35b3480156102e557600080fd5b5061019761060d565b6000806040805190810160405280876040518082805190602001908083835b6020831061032c5780518252601f19909201916020918201910161030d565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086526003549501949094528051935083925084915080838360005b8381101561038757818101518382015260200161036f565b5050505090500191505060405180910390209150600090505b6000548110156104b25760008054829081106103b857fe5b600091825260209091200154855173ffffffffffffffffffffffffffffffffffffffff9091169060019084908890859081106103f057fe5b90602001906020020151878581518110151561040857fe5b90602001906020020151878681518110151561042057fe5b60209081029091018101516040805160008082528185018084529790975260ff9095168582015260608501939093526080840152905160a0808401949293601f19830193908390039091019190865af1158015610481573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161415156104aa57fe5b6001016103a0565b85516104c5906001906020890190610667565b50506003805460010190555050505050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561055a5780601f1061052f5761010080835404028352916020019161055a565b820191906000526020600020905b81548152906001019060200180831161053d57829003601f168201915b505050505081565b600080548290811061057057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035481565b6060600080548060200260200160405190810160405280929190818152602001828054801561060257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105d7575b505050505090505b90565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561055a5780601f1061052f5761010080835404028352916020019161055a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106a857805160ff19168380011785556106d5565b828001600101855582156106d5579182015b828111156106d55782518255916020019190600101906106ba565b506106e19291506106e5565b5090565b61060a91905b808211156106e157600081556001016106eb5600a165627a7a723058200d8d06df311c7f49420dd8e8a22c758fe8e22f9cc23e761ce4aea1c543cc96440029"
const keystore = {
    >>>>>>>archivo key<<<<;
};
const decryptedAccount = web3.eth.accounts.decrypt(keystore, '>>>>>pass<<<<');
const gasPrice = web3.eth.gasPrice;
const gasPriceHex = web3.utils.toHex(gasPrice);
const gasLimitHex = web3.utils.toHex(300000);
const rawTx = {
    nonce: "0x0",
    gasPrice: gasPriceHex,
    gasLimit: gasLimitHex,
    data: contractData,
    from: "0xB9a4CCd31Febe2759255af643F551fCD0765523e",
    initialValidators: ["0xB9a4CCd31Febe2759255af643F551fCD0765523e"],
    initialCode: "0x608060405234801561001057600080fd5b5060ec8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14604e578063bc64b76d14607e575b600080fd5b348015605957600080fd5b50606060ac565b60405180826000191660001916815260200191505060405180910390f35b348015608957600080fd5b5060aa600480360381019080803560001916906020019092919050505060b2565b005b60005481565b8060008160001916905550505600a165627a7a72305820c6e3cf77e11ff5bc7a965c5e060a832fbb326c6c1ab80cab0dd5687b75b4da0b0029",
    initialState: "0x608060405234801561001057600080fd5b5060ec8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14604e578063bc64b76d14607e575b600080fd5b348015605957600080fd5b50606060ac565b60405180826000191660001916815260200191505060405180910390f35b348015608957600080fd5b5060aa600480360381019080803560001916906020019092919050505060b2565b005b60005481565b8060008160001916905550505600a165627a7a72305820c6e3cf77e11ff5bc7a965c5e060a832fbb326c6c1ab80cab0dd5687b75b4da0b0029"
};
(async () =>{
    try {
        const signed = await decryptedAccount.signTransaction(rawTx);
        console.log(signed);
    } catch (error) {
        console.log(error);
    }
})()

